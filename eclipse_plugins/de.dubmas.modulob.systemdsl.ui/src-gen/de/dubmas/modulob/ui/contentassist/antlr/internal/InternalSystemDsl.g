/*
* generated by Xtext
*/
grammar InternalSystemDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.dubmas.modulob.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.dubmas.modulob.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.dubmas.modulob.services.SystemDslGrammarAccess;

}

@parser::members {
 
 	private SystemDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SystemDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSystem
entryRuleSystem 
:
{ before(grammarAccess.getSystemRule()); }
	 ruleSystem
{ after(grammarAccess.getSystemRule()); } 
	 EOF 
;

// Rule System
ruleSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemAccess().getGroup()); }
(rule__System__Group__0)
{ after(grammarAccess.getSystemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__System__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__0__Impl
	rule__System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getSystemKeyword_0()); }

	'system' 

{ after(grammarAccess.getSystemAccess().getSystemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__1__Impl
	rule__System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getNameAssignment_1()); }
(rule__System__NameAssignment_1)
{ after(grammarAccess.getSystemAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__2__Impl
	rule__System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getConsistsOfKeyword_2()); }

	'consistsOf' 

{ after(grammarAccess.getSystemAccess().getConsistsOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__3__Impl
	rule__System__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getModulesAssignment_3()); }
(rule__System__ModulesAssignment_3)
{ after(grammarAccess.getSystemAccess().getModulesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getGroup_4()); }
(rule__System__Group_4__0)*
{ after(grammarAccess.getSystemAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__System__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group_4__0__Impl
	rule__System__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getSystemAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__System__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__System__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__System__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getModulesAssignment_4_1()); }
(rule__System__ModulesAssignment_4_1)
{ after(grammarAccess.getSystemAccess().getModulesAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getModuleKeyword_0()); }

	'module' 

{ after(grammarAccess.getModuleAccess().getModuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameAssignment_1()); }
(rule__Module__NameAssignment_1)
{ after(grammarAccess.getModuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__System__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__ModulesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getModulesModuleParserRuleCall_3_0()); }
	ruleModule{ after(grammarAccess.getSystemAccess().getModulesModuleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__System__ModulesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemAccess().getModulesModuleParserRuleCall_4_1_0()); }
	ruleModule{ after(grammarAccess.getSystemAccess().getModulesModuleParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


