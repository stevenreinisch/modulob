import diff;
import match;
import modulob;
import migration;
import system;
import ecore;

extension org::eclipse::xtend::util::stdlib::io;
extension de::dubmas::modulob::migration::transformation::DiffModelQueries;
extension de::dubmas::modulob::migration::transformation::Helper;

/*
	EMF Compare's diff model:
	
 	- right is related to the old model,
 	- left to the new model
 */

Migration transform(DiffModel diffModel, Module sourceModule):
	let migration = new Migration:
		migration.entityChanges.addAll(diffModel.entityCopies(sourceModule))
		->
		migration.entityChanges.addAll(diffModel.entityChangedFeatures(sourceModule))
		->
		migration.entityChanges.addAll(diffModel.entityAdds())
		->
		migration.entityChanges.addAll(diffModel.entityRemoveds())
		->
		migration.entityChanges.addAll(diffModel.entityRenameds(sourceModule))
		->
		migration
;

List[EntityCopied] entityCopies(DiffModel diffModel, Module sourceModule):
	sourceModule.entityModel.entities.info().
		without(diffModel.changedEntities()).
			without(diffModel.removedEntities()).
				without(diffModel.renamedEntities()).toEntityCopied().info()
;

List[EntityAdded] entityAdds(DiffModel diffModel):
	diffModel.eAllContents.typeSelect(ModelElementChangeLeftTarget).
		select(changeInNewModel | Entity.isInstance(changeInNewModel.leftElement)).toEntityAdded()
;

List[EntityRemoved] entityRemoveds(DiffModel diffModel):
	diffModel.removedEntities().toEntityRemoved()
;

List[EntityChangedFeatures] entityChangedFeatures(DiffModel diffModel, Module sourceModule):
	diffModel.diffGroupsForChangedEntities().toEntityChangedFeatures(diffModel, sourceModule)
;

List[EntityRenamed] entityRenameds(DiffModel diffModel, Module sourceModule):
	diffModel.eAllContents.typeSelect(UpdateAttribute).
		select(ua | Entity.isInstance(((DiffGroup)ua.eContainer).rightParent)
					&&
					Entity.isInstance(ua.rightElement)
					&&
					Entity.isInstance(ua.leftElement)
					&&
					ua.attribute.name == 'name').
		toEntityRenamed(diffModel, sourceModule)
;

/*
 * Ignore the error message "cannot cast from ecore::EObject to modulob::Entity".
 * The cast works at runtime.
 */
create EntityCopied this toEntityCopied(Entity sourceEntity):
		this.setSourceEntity(sourceEntity) 
		->
		this.setDestinationEntity(sourceEntity) 
		->
		this.attributeChanges.addAll(sourceEntity.features.
			select(f | f.isPrimitiveTypeFeature()).toAttributeCopied())
		->
		this.relationChanges.addAll(sourceEntity.features.
			select(f | !f.isPrimitiveTypeFeature()).toRelationCopied())
;

create EntityRenamed this toEntityRenamed(UpdateAttribute ua, DiffModel diffModel, Module sourceModule):
	this.configure(diffModel, (Entity)ua.rightElement, (Entity)ua.leftElement)								
;

create EntityAdded this toEntityAdded(ModelElementChangeLeftTarget change):
	this.setDestinationEntity((Entity)change.leftElement)
;

create EntityRemoved this toEntityRemoved(Entity removedEntity):
	this.setSourceEntity(removedEntity)
;

create EntityChangedFeatures this toEntityChangedFeatures(DiffGroup diffGroup, DiffModel diffModel, Module sourceModule):
	let sourceEntity = (Entity)diffGroup.rightParent:
	let destinationEntity = sourceModule.entityModel.entities.select(e|e.name == sourceEntity.name).first():
		this.configure(diffModel, sourceEntity, destinationEntity)
;

private configure(EntityChange ec, DiffModel  diffModel, Entity sourceEntity, Entity destinationEntity):
	ec.setSourceEntity(sourceEntity)
	->
	ec.setDestinationEntity(destinationEntity)
	->	
	
	/*
	 * handle attributeChanges
	 */
	//copied
	ec.attributeChanges.addAll(
			sourceEntity.primitiveTypeFeatures().
				without(diffModel.renamedAttributes(sourceEntity.name)).
					without(diffModel.removedAttributes(sourceEntity.name))
						.toAttributeCopied()
	)
	->
	 //renamed
	ec.attributeChanges.addAll(diffModel.attributeRenamedUpdates(sourceEntity.name).toAttributeRenamed())
	->
	//added
	ec.attributeChanges.addAll(diffModel.attributeAddedChanges(sourceEntity.name).toAttributeAdded())
	->
	//removed
	ec.attributeChanges.addAll(diffModel.attributeRemovedChanges(sourceEntity.name).toAttributeRemoved())
	->
	
	/*
	 * handle relationChanges
	 */
	 //copied
	ec.relationChanges.addAll(
		sourceEntity.relationTypeFeatures().
			without(diffModel.renamedRelations(sourceEntity.name)).
				without(diffModel.removedRelations(sourceEntity.name)).
					toRelationCopied()
	)
	-> 
	//renamed
	ec.relationChanges.addAll(diffModel.relationRenamedUpdates(sourceEntity.name).toRelationRenamed())
	->
	//added
	ec.relationChanges.addAll(diffModel.relationAddedChanges(sourceEntity.name).toRelationAdded())
	->
	//removed
	ec.relationChanges.addAll(diffModel.relationRemovedChanges(sourceEntity.name).toRelationRemoved())
;

create AttributeRenamed this toAttributeRenamed(UpdateAttribute ua):
	let sourceFeature = (Feature)ua.rightElement:
		let destinationFeature = (Feature)ua.leftElement:
			this.setSourceExpression(sourceFeature.name) 
			->
			this.setSourceFeature(sourceFeature) 
			->
			this.setDestinationFeature(destinationFeature)
;

create AttributeCopied this toAttributeCopied(Feature attrFeature):
	this.setSourceFeature(attrFeature)
	->
	this.setDestinationFeature(attrFeature)
	->
	this.setSourceExpression(attrFeature.name)
;

create AttributeAdded this toAttributeAdded(ModelElementChangeLeftTarget change):
	let destinationFeature = (Feature)change.leftElement:
		this.setDestinationFeature(destinationFeature)
;

create AttributeRemoved this toAttributeRemoved(ModelElementChangeRightTarget change):
	let sourceFeature = (Feature)change.rightElement:
		this.setSourceFeature(sourceFeature)
;


create RelationRenamed this toRelationRenamed(UpdateAttribute ua):
	let sourceFeature = (Feature)ua.rightElement:
		let destinationFeature = (Feature)ua.leftElement:
			this.setSourceExpression(sourceFeature.name) 
			->
			this.setSourceFeature(sourceFeature) 
			->
			this.setDestinationFeature(destinationFeature)
;

create RelationCopied this toRelationCopied(Feature relFeature):
	this.setSourceFeature(relFeature)
	->
	this.setDestinationFeature(relFeature)
	->
	this.setSourceExpression(relFeature.name)
;

create RelationAdded this toRelationAdded(ModelElementChangeLeftTarget change):
	let destinationFeature = (Feature)change.leftElement:
		this.setDestinationFeature(destinationFeature)
;

create RelationRemoved this toRelationRemoved(ModelElementChangeRightTarget change):
	let sourceFeature = (Feature)change.rightElement:
		this.setSourceFeature(sourceFeature)
;

