import state;

extension de::dubmas::modulob::generator::templates::Types;

headerFilePath(StateMachine sm):
	sm.module.name + "/private/states/"
;

implFilePath(StateMachine sm):
	sm.module.name + "/private/states/"
;

enumLiteral(State s):
	((State)s.eContainer).name + 'State_' + s.name.toUpperCase()
;

enumLiteral(Transition t):
	((State)t.eContainer).name + 'Transition_' +
	((State)t.source).name.toUpperCase() + '_' +
	((State)t.target).name.toUpperCase()
;

className(StateMachine sm):
	sm.name + "StateMachine"
;

entrySelectorName(State s):
	'enter_' + s.name
;

exitSelectorName(State s):
	'exit_' + s.name
;

isInitial(State s):
	s.incoming.exists(t | InitialNode.isInstance(t.source))
;

isFinal(State s):
	s.outgoing.size == 0
;

name(Transition t):
	((State)t.source).name + '_to_' + ((State)t.target).name
;

guardSelectorName(Transition t):
	'guard_' + t.name()
;

actionSelectorName(Transition t):
	'action_' + t.name()
;

cached relevantTransitions(StateMachine sm):
	sm.transitions.select(t | !InitialNode.isInstance(t.source))
;

cached deterministicExitStates(StateMachine sm):
	sm.nodes.typeSelect(State).select(s | s.outgoing.size <= 1)
;

cached nonDeterministicExitStates(StateMachine sm):
	sm.nodes.typeSelect(State).without(sm.deterministicExitStates())
;
