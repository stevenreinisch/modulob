module de.dubmas.modulob.reaction.generator.workflow.ReactionGenerator

var genPath      = 'src-gen'
var fileEncoding = 'UTF-8'
var modelPath    = 'src/model'
var modulesSlot  = 'modules'

//slots for models supplied by readers	
var primitiveTypesSlot        = 'primitiveTypesSlot'
var behavioursSlot            = 'behavioursSlot'
//internally used slot
var transformedBehavioursSlot = 'transformedBehavioursSlot'


Workflow {
	
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::Util::setGlobalVar(${behavioursSlot}, \'Behaviours\')'
	}
	
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::Util::setGlobalVar(${modulesSlot}, \'Modules\')'
	}
	
	/*
	 * weave behaviours 
	 *
	 *	weaving is done directly on ${behavioursSlot} that is globally available
	 *	=> this weaving has global side effects .. in case you might wonder
	 *
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::BehaviourWeaver::weaveBeforeAdvicesIntoReactions(${behavioursSlot})'
	}
	*/
	
	/*
		Injects an interface that dispatches notifications that trigger multiple reactions ("multi-notifications")
		into each module whose notification model contains such multi-notifications.
		
		The dispatcher-interfaces are injected into the modules that are referenced
		by the reactions stored in the globally available ${behavioursSlot}
	*/
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::DispatcherInterfaceInjector::injectDispatcherInterfaces(${primitiveTypesSlot})'
	}
	
	/*
		transform:
		
		- each multi-notification N_m is divided into multiple notification N_i (i := order of reaction)
		- each reaction to N_m then reacts to one of N_i
		- for N_m a "dispatcher-reaction" is created
		- each dispatcher-reaction is associated with a method in a dispatcher-interface
	*/
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::NotificationOrderTransfo::transform(${behavioursSlot})'
		outputSlot = '${transformedBehavioursSlot}'
	}
	
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::Util::setGlobalVar(${transformedBehavioursSlot}, \'TransformedBehaviours\')'
	}
	
	component = org.eclipse.xtend.XtendComponent{
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		invoke = 'de::dubmas::modulob::reaction::generator::templates::ModuleInjector::inject(${modulesSlot})'
	}
	
	component = @de.dubmas.modulob.generator.workflow.ModulobGenerator auto-inject{
		externalAdvices = 'de::dubmas::modulob::reaction::generator::templates::Advices'
	}
	
	component = org.eclipse.xpand2.Generator {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel{}
		expand = 'de::dubmas::modulob::reaction::generator::templates::Notifications::main(${transformedBehavioursSlot}) FOR ${modulesSlot}'
		
		outlet = {
			path = genPath
		}
		fileEncoding = fileEncoding
	}
}