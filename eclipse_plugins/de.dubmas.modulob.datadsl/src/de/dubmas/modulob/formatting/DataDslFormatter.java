/*
 * generated by Xtext
 */
package de.dubmas.modulob.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import de.dubmas.modulob.services.DataDslGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class DataDslFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		/*
		 * It's usually a good idea to activate the following three statements.
 		 * They will add and preserve newlines around comments
 		 * */
		c.setLinewrap(0, 1, 2).before(((DataDslGrammarAccess)getGrammarAccess()).getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(((DataDslGrammarAccess)getGrammarAccess()).getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(((DataDslGrammarAccess)getGrammarAccess()).getML_COMMENTRule());
		
		c.setLinewrap(2).after(((DataDslGrammarAccess)getGrammarAccess()).getEntityModelAccess().getVersionSTRINGTerminalRuleCall_3_0());
		c.setLinewrap().after(((DataDslGrammarAccess)getGrammarAccess()).getEntityRule());
	}
}
