/*
* generated by Xtext
*/

package de.dubmas.modulob.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.dubmas.modulob.common.services.DslGrammarAccess;

@Singleton
public class DataDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EntityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntitiesForModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_1_0 = (CrossReference)cModuleAssignment_1.eContents().get(0);
		private final RuleCall cModuleModuleQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cModuleModuleCrossReference_1_0.eContents().get(1);
		private final Keyword cVersionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		
		//EntityModel returns system::EntityModel:
		//	"entities for module" module=[system::Module|QualifiedName] "version" version=STRING entities+=Entity*;
		public ParserRule getRule() { return rule; }

		//"entities for module" module=[system::Module|QualifiedName] "version" version=STRING entities+=Entity*
		public Group getGroup() { return cGroup; }

		//"entities for module"
		public Keyword getEntitiesForModuleKeyword_0() { return cEntitiesForModuleKeyword_0; }

		//module=[system::Module|QualifiedName]
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//[system::Module|QualifiedName]
		public CrossReference getModuleModuleCrossReference_1_0() { return cModuleModuleCrossReference_1_0; }

		//QualifiedName
		public RuleCall getModuleModuleQualifiedNameParserRuleCall_1_0_1() { return cModuleModuleQualifiedNameParserRuleCall_1_0_1; }

		//"version"
		public Keyword getVersionKeyword_2() { return cVersionKeyword_2; }

		//version=STRING
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_0() { return cVersionSTRINGTerminalRuleCall_3_0; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cIsAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsAbstractAbstractKeyword_1_0 = (Keyword)cIsAbstractAssignment_1.eContents().get(0);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperEntityCrossReference_4_1_0 = (CrossReference)cSuperAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperEntityIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSuperEntityCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeaturesFeatureParserRuleCall_6_0 = (RuleCall)cFeaturesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Entity returns modulob::Entity:
		//	annotations+=Annotation* isAbstract?="abstract"? "entity" name=ID (":" super=[modulob::Entity])? "{"
		//	features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=Annotation* isAbstract?="abstract"? "entity" name=ID (":" super=[modulob::Entity])? "{" features+=Feature*
		//"}"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//isAbstract?="abstract"?
		public Assignment getIsAbstractAssignment_1() { return cIsAbstractAssignment_1; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_1_0() { return cIsAbstractAbstractKeyword_1_0; }

		//"entity"
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//(":" super=[modulob::Entity])?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//super=[modulob::Entity]
		public Assignment getSuperAssignment_4_1() { return cSuperAssignment_4_1; }

		//[modulob::Entity]
		public CrossReference getSuperEntityCrossReference_4_1_0() { return cSuperEntityCrossReference_4_1_0; }

		//ID
		public RuleCall getSuperEntityIDTerminalRuleCall_4_1_0_1() { return cSuperEntityIDTerminalRuleCall_4_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_6() { return cFeaturesAssignment_6; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_6_0() { return cFeaturesFeatureParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionConfigOptionEnumRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueConfigValueEnumRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Annotation returns modulob::Annotation:
		//	"@" option=ConfigOption (":" value=ConfigValue)?;
		public ParserRule getRule() { return rule; }

		//"@" option=ConfigOption (":" value=ConfigValue)?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//option=ConfigOption
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }

		//ConfigOption
		public RuleCall getOptionConfigOptionEnumRuleCall_1_0() { return cOptionConfigOptionEnumRuleCall_1_0; }

		//(":" value=ConfigValue)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//value=ConfigValue
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//ConfigValue
		public RuleCall getValueConfigValueEnumRuleCall_2_1_0() { return cValueConfigValueEnumRuleCall_2_1_0; }
	}
	
	
	public class ConfigOptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigOption");
		private final EnumLiteralDeclaration cPersistencyEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPersistencyPersistencyKeyword_0 = (Keyword)cPersistencyEnumLiteralDeclaration.eContents().get(0);
		
		//enum ConfigOption returns modulob::ConfigOption:
		//	persistency;
		public EnumRule getRule() { return rule; }

		//persistency
		public EnumLiteralDeclaration getPersistencyEnumLiteralDeclaration() { return cPersistencyEnumLiteralDeclaration; }

		//"persistency"
		public Keyword getPersistencyPersistencyKeyword_0() { return cPersistencyPersistencyKeyword_0; }
	}

	public class ConfigValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigValue");
		private final EnumLiteralDeclaration cCoreDataEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cCoreDataCoreDataKeyword_0 = (Keyword)cCoreDataEnumLiteralDeclaration.eContents().get(0);
		
		////Feature returns modulob::Feature:
		////	(isIndexed?='indexed')?
		////	(isContainment?='-[')?
		////	type=TypeRef name=ID ('=' defaultValue=ValueObject)? 
		////	('<->' inverse=[modulob::Feature])?
		////	(';')?
		////; enum ConfigValue returns modulob::ConfigValue:
		//	CoreData;
		public EnumRule getRule() { return rule; }

		//CoreData
		public EnumLiteralDeclaration getCoreDataEnumLiteralDeclaration() { return cCoreDataEnumLiteralDeclaration; }

		//"CoreData"
		public Keyword getCoreDataCoreDataKeyword_0() { return cCoreDataCoreDataKeyword_0; }
	}
	
	private EntityModelElements pEntityModel;
	private EntityElements pEntity;
	private AnnotationElements pAnnotation;
	private ConfigOptionElements unknownRuleConfigOption;
	private ConfigValueElements unknownRuleConfigValue;
	
	private final GrammarProvider grammarProvider;

	private DslGrammarAccess gaDsl;

	@Inject
	public DataDslGrammarAccess(GrammarProvider grammarProvider,
		DslGrammarAccess gaDsl) {
		this.grammarProvider = grammarProvider;
		this.gaDsl = gaDsl;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public DslGrammarAccess getDslGrammarAccess() {
		return gaDsl;
	}

	
	//EntityModel returns system::EntityModel:
	//	"entities for module" module=[system::Module|QualifiedName] "version" version=STRING entities+=Entity*;
	public EntityModelElements getEntityModelAccess() {
		return (pEntityModel != null) ? pEntityModel : (pEntityModel = new EntityModelElements());
	}
	
	public ParserRule getEntityModelRule() {
		return getEntityModelAccess().getRule();
	}

	//Entity returns modulob::Entity:
	//	annotations+=Annotation* isAbstract?="abstract"? "entity" name=ID (":" super=[modulob::Entity])? "{"
	//	features+=Feature* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Annotation returns modulob::Annotation:
	//	"@" option=ConfigOption (":" value=ConfigValue)?;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//enum ConfigOption returns modulob::ConfigOption:
	//	persistency;
	public ConfigOptionElements getConfigOptionAccess() {
		return (unknownRuleConfigOption != null) ? unknownRuleConfigOption : (unknownRuleConfigOption = new ConfigOptionElements());
	}
	
	public EnumRule getConfigOptionRule() {
		return getConfigOptionAccess().getRule();
	}

	////Feature returns modulob::Feature:
	////	(isIndexed?='indexed')?
	////	(isContainment?='-[')?
	////	type=TypeRef name=ID ('=' defaultValue=ValueObject)? 
	////	('<->' inverse=[modulob::Feature])?
	////	(';')?
	////; enum ConfigValue returns modulob::ConfigValue:
	//	CoreData;
	public ConfigValueElements getConfigValueAccess() {
		return (unknownRuleConfigValue != null) ? unknownRuleConfigValue : (unknownRuleConfigValue = new ConfigValueElements());
	}
	
	public EnumRule getConfigValueRule() {
		return getConfigValueAccess().getRule();
	}

	//TypeLib returns types::Lib:
	//	primitiveTypes+=Primitive+ anyType=Any;
	public DslGrammarAccess.TypeLibElements getTypeLibAccess() {
		return gaDsl.getTypeLibAccess();
	}
	
	public ParserRule getTypeLibRule() {
		return getTypeLibAccess().getRule();
	}

	//Primitive returns types::Primitive:
	//	"primitive type" name=ID;
	public DslGrammarAccess.PrimitiveElements getPrimitiveAccess() {
		return gaDsl.getPrimitiveAccess();
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//Any returns types::Any:
	//	"any type" name=ID;
	public DslGrammarAccess.AnyElements getAnyAccess() {
		return gaDsl.getAnyAccess();
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}

	//Feature returns modulob::Feature:
	//	isIndexed?="indexed"? isContainment?="-["? type=TypeRef name=ID ("=" defaultValue=ValueObject)? ("<->"
	//	inverse=[modulob::Feature|QualifiedName])? ";"?;
	public DslGrammarAccess.FeatureElements getFeatureAccess() {
		return gaDsl.getFeatureAccess();
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//TypeRef returns types::TypeRef:
	//	referenced=[types::Type|QualifiedName] isMulti?="[]"?;
	public DslGrammarAccess.TypeRefElements getTypeRefAccess() {
		return gaDsl.getTypeRefAccess();
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//ValueObject returns modulob::ValueObject:
	//	StringValue | IntegerValue | FloatValue;
	public DslGrammarAccess.ValueObjectElements getValueObjectAccess() {
		return gaDsl.getValueObjectAccess();
	}
	
	public ParserRule getValueObjectRule() {
		return getValueObjectAccess().getRule();
	}

	//StringValue returns modulob::StringValue:
	//	value=EStringObject;
	public DslGrammarAccess.StringValueElements getStringValueAccess() {
		return gaDsl.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//EStringObject returns ecore::EString:
	//	STRING;
	public DslGrammarAccess.EStringObjectElements getEStringObjectAccess() {
		return gaDsl.getEStringObjectAccess();
	}
	
	public ParserRule getEStringObjectRule() {
		return getEStringObjectAccess().getRule();
	}

	//IntegerValue returns modulob::IntegerValue:
	//	value=EIntegerObject;
	public DslGrammarAccess.IntegerValueElements getIntegerValueAccess() {
		return gaDsl.getIntegerValueAccess();
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//EIntegerObject returns ecore::EIntegerObject:
	//	INT;
	public DslGrammarAccess.EIntegerObjectElements getEIntegerObjectAccess() {
		return gaDsl.getEIntegerObjectAccess();
	}
	
	public ParserRule getEIntegerObjectRule() {
		return getEIntegerObjectAccess().getRule();
	}

	//FloatValue returns modulob::FloatValue:
	//	value=EFloatObject;
	public DslGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaDsl.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//EFloatObject returns ecore::EFloatObject:
	//	"-"? INT? "." INT;
	public DslGrammarAccess.EFloatObjectElements getEFloatObjectAccess() {
		return gaDsl.getEFloatObjectAccess();
	}
	
	public ParserRule getEFloatObjectRule() {
		return getEFloatObjectAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public DslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaDsl.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaDsl.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDsl.getANY_OTHERRule();
	} 
}
