/*
* generated by Xtext
*/

package de.dubmas.modulob.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.dubmas.modulob.common.services.DslGrammarAccess;

@Singleton
public class BehaviourDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BehaviouralModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviouralModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCurrentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCurrentCurrentKeyword_0_0 = (Keyword)cCurrentAssignment_0.eContents().get(0);
		private final Keyword cBehavioursForSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSystemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSystemSystemCrossReference_2_0 = (CrossReference)cSystemAssignment_2.eContents().get(0);
		private final RuleCall cSystemSystemQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSystemSystemCrossReference_2_0.eContents().get(1);
		private final Keyword cVersionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionSTRINGTerminalRuleCall_4_0 = (RuleCall)cVersionAssignment_4.eContents().get(0);
		private final Assignment cBehavioursAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBehavioursBehaviourParserRuleCall_5_0 = (RuleCall)cBehavioursAssignment_5.eContents().get(0);
		
		//BehaviouralModel returns system::BehaviouralModel:
		//	^current?="current"? "behaviours for system" system=[system::System|QualifiedName] "version" version=STRING
		//	behaviours+=Behaviour*;
		public ParserRule getRule() { return rule; }

		//^current?="current"? "behaviours for system" system=[system::System|QualifiedName] "version" version=STRING
		//behaviours+=Behaviour*
		public Group getGroup() { return cGroup; }

		//^current?="current"?
		public Assignment getCurrentAssignment_0() { return cCurrentAssignment_0; }

		//"current"
		public Keyword getCurrentCurrentKeyword_0_0() { return cCurrentCurrentKeyword_0_0; }

		//"behaviours for system"
		public Keyword getBehavioursForSystemKeyword_1() { return cBehavioursForSystemKeyword_1; }

		//system=[system::System|QualifiedName]
		public Assignment getSystemAssignment_2() { return cSystemAssignment_2; }

		//[system::System|QualifiedName]
		public CrossReference getSystemSystemCrossReference_2_0() { return cSystemSystemCrossReference_2_0; }

		//QualifiedName
		public RuleCall getSystemSystemQualifiedNameParserRuleCall_2_0_1() { return cSystemSystemQualifiedNameParserRuleCall_2_0_1; }

		//"version"
		public Keyword getVersionKeyword_3() { return cVersionKeyword_3; }

		//version=STRING
		public Assignment getVersionAssignment_4() { return cVersionAssignment_4; }

		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_4_0() { return cVersionSTRINGTerminalRuleCall_4_0; }

		//behaviours+=Behaviour*
		public Assignment getBehavioursAssignment_5() { return cBehavioursAssignment_5; }

		//Behaviour
		public RuleCall getBehavioursBehaviourParserRuleCall_5_0() { return cBehavioursBehaviourParserRuleCall_5_0; }
	}

	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviourKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReactionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReactionsReactionParserRuleCall_3_0 = (RuleCall)cReactionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Behaviour returns behaviour::Behaviour:
		//	"behaviour" name=ID "{" reactions+=Reaction* "}";
		public ParserRule getRule() { return rule; }

		//"behaviour" name=ID "{" reactions+=Reaction* "}"
		public Group getGroup() { return cGroup; }

		//"behaviour"
		public Keyword getBehaviourKeyword_0() { return cBehaviourKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//reactions+=Reaction*
		public Assignment getReactionsAssignment_3() { return cReactionsAssignment_3; }

		//Reaction
		public RuleCall getReactionsReactionParserRuleCall_3_0() { return cReactionsReactionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInterfaceInterfaceCrossReference_1_0 = (CrossReference)cInterfaceAssignment_1.eContents().get(0);
		private final RuleCall cInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cInterfaceInterfaceCrossReference_1_0.eContents().get(1);
		private final Keyword cReactsToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNotificationNotificationCrossReference_3_0 = (CrossReference)cNotificationAssignment_3.eContents().get(0);
		private final RuleCall cNotificationNotificationQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cNotificationNotificationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrderAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrderINTTerminalRuleCall_4_1_0 = (RuleCall)cOrderAssignment_4_1.eContents().get(0);
		private final Keyword cFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cByCallingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cMethodMethodCrossReference_6_0 = (CrossReference)cMethodAssignment_6.eContents().get(0);
		private final RuleCall cMethodMethodReferenceableMethodNameParserRuleCall_6_0_1 = (RuleCall)cMethodMethodCrossReference_6_0.eContents().get(1);
		
		//Reaction returns behaviour::Reaction:
		//	"interface" interface=[modulob::Interface|QualifiedName] "reacts to"
		//	notification=[modulob::Notification|QualifiedName] ("as" order=INT ".")? "by calling"
		//	method=[modulob::Method|ReferenceableMethodName];
		public ParserRule getRule() { return rule; }

		//"interface" interface=[modulob::Interface|QualifiedName] "reacts to" notification=[modulob::Notification|QualifiedName]
		//("as" order=INT ".")? "by calling" method=[modulob::Method|ReferenceableMethodName]
		public Group getGroup() { return cGroup; }

		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//interface=[modulob::Interface|QualifiedName]
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }

		//[modulob::Interface|QualifiedName]
		public CrossReference getInterfaceInterfaceCrossReference_1_0() { return cInterfaceInterfaceCrossReference_1_0; }

		//QualifiedName
		public RuleCall getInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1() { return cInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1; }

		//"reacts to"
		public Keyword getReactsToKeyword_2() { return cReactsToKeyword_2; }

		//notification=[modulob::Notification|QualifiedName]
		public Assignment getNotificationAssignment_3() { return cNotificationAssignment_3; }

		//[modulob::Notification|QualifiedName]
		public CrossReference getNotificationNotificationCrossReference_3_0() { return cNotificationNotificationCrossReference_3_0; }

		//QualifiedName
		public RuleCall getNotificationNotificationQualifiedNameParserRuleCall_3_0_1() { return cNotificationNotificationQualifiedNameParserRuleCall_3_0_1; }

		//("as" order=INT ".")?
		public Group getGroup_4() { return cGroup_4; }

		//"as"
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }

		//order=INT
		public Assignment getOrderAssignment_4_1() { return cOrderAssignment_4_1; }

		//INT
		public RuleCall getOrderINTTerminalRuleCall_4_1_0() { return cOrderINTTerminalRuleCall_4_1_0; }

		//"."
		public Keyword getFullStopKeyword_4_2() { return cFullStopKeyword_4_2; }

		//"by calling"
		public Keyword getByCallingKeyword_5() { return cByCallingKeyword_5; }

		//method=[modulob::Method|ReferenceableMethodName]
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }

		//[modulob::Method|ReferenceableMethodName]
		public CrossReference getMethodMethodCrossReference_6_0() { return cMethodMethodCrossReference_6_0; }

		//ReferenceableMethodName
		public RuleCall getMethodMethodReferenceableMethodNameParserRuleCall_6_0_1() { return cMethodMethodReferenceableMethodNameParserRuleCall_6_0_1; }
	}

	public class ReferenceableMethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceableMethodName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ReferenceableMethodName:
		//	ID (":" ID?)*;
		public ParserRule getRule() { return rule; }

		//ID (":" ID?)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(":" ID?)*
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private BehaviouralModelElements pBehaviouralModel;
	private BehaviourElements pBehaviour;
	private ReactionElements pReaction;
	private ReferenceableMethodNameElements pReferenceableMethodName;
	
	private final GrammarProvider grammarProvider;

	private DslGrammarAccess gaDsl;

	@Inject
	public BehaviourDslGrammarAccess(GrammarProvider grammarProvider,
		DslGrammarAccess gaDsl) {
		this.grammarProvider = grammarProvider;
		this.gaDsl = gaDsl;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public DslGrammarAccess getDslGrammarAccess() {
		return gaDsl;
	}

	
	//BehaviouralModel returns system::BehaviouralModel:
	//	^current?="current"? "behaviours for system" system=[system::System|QualifiedName] "version" version=STRING
	//	behaviours+=Behaviour*;
	public BehaviouralModelElements getBehaviouralModelAccess() {
		return (pBehaviouralModel != null) ? pBehaviouralModel : (pBehaviouralModel = new BehaviouralModelElements());
	}
	
	public ParserRule getBehaviouralModelRule() {
		return getBehaviouralModelAccess().getRule();
	}

	//Behaviour returns behaviour::Behaviour:
	//	"behaviour" name=ID "{" reactions+=Reaction* "}";
	public BehaviourElements getBehaviourAccess() {
		return (pBehaviour != null) ? pBehaviour : (pBehaviour = new BehaviourElements());
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}

	//Reaction returns behaviour::Reaction:
	//	"interface" interface=[modulob::Interface|QualifiedName] "reacts to"
	//	notification=[modulob::Notification|QualifiedName] ("as" order=INT ".")? "by calling"
	//	method=[modulob::Method|ReferenceableMethodName];
	public ReactionElements getReactionAccess() {
		return (pReaction != null) ? pReaction : (pReaction = new ReactionElements());
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//ReferenceableMethodName:
	//	ID (":" ID?)*;
	public ReferenceableMethodNameElements getReferenceableMethodNameAccess() {
		return (pReferenceableMethodName != null) ? pReferenceableMethodName : (pReferenceableMethodName = new ReferenceableMethodNameElements());
	}
	
	public ParserRule getReferenceableMethodNameRule() {
		return getReferenceableMethodNameAccess().getRule();
	}

	//TypeLib returns types::Lib:
	//	primitiveTypes+=Primitive+ anyType=Any;
	public DslGrammarAccess.TypeLibElements getTypeLibAccess() {
		return gaDsl.getTypeLibAccess();
	}
	
	public ParserRule getTypeLibRule() {
		return getTypeLibAccess().getRule();
	}

	//Primitive returns types::Primitive:
	//	"primitive type" name=ID;
	public DslGrammarAccess.PrimitiveElements getPrimitiveAccess() {
		return gaDsl.getPrimitiveAccess();
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//Any returns types::Any:
	//	"any type" name=ID;
	public DslGrammarAccess.AnyElements getAnyAccess() {
		return gaDsl.getAnyAccess();
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}

	//TypeRef returns types::TypeRef:
	//	referenced=[types::Type|QualifiedName] isMulti?="[]"?;
	public DslGrammarAccess.TypeRefElements getTypeRefAccess() {
		return gaDsl.getTypeRefAccess();
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//ValueObject returns modulob::ValueObject:
	//	StringValue | IntegerValue | FloatValue;
	public DslGrammarAccess.ValueObjectElements getValueObjectAccess() {
		return gaDsl.getValueObjectAccess();
	}
	
	public ParserRule getValueObjectRule() {
		return getValueObjectAccess().getRule();
	}

	//StringValue returns modulob::StringValue:
	//	value=EStringObject;
	public DslGrammarAccess.StringValueElements getStringValueAccess() {
		return gaDsl.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//EStringObject returns ecore::EString:
	//	STRING;
	public DslGrammarAccess.EStringObjectElements getEStringObjectAccess() {
		return gaDsl.getEStringObjectAccess();
	}
	
	public ParserRule getEStringObjectRule() {
		return getEStringObjectAccess().getRule();
	}

	//IntegerValue returns modulob::IntegerValue:
	//	value=EIntegerObject;
	public DslGrammarAccess.IntegerValueElements getIntegerValueAccess() {
		return gaDsl.getIntegerValueAccess();
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//EIntegerObject returns ecore::EIntegerObject:
	//	INT;
	public DslGrammarAccess.EIntegerObjectElements getEIntegerObjectAccess() {
		return gaDsl.getEIntegerObjectAccess();
	}
	
	public ParserRule getEIntegerObjectRule() {
		return getEIntegerObjectAccess().getRule();
	}

	//FloatValue returns modulob::FloatValue:
	//	value=EFloatObject;
	public DslGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaDsl.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//EFloatObject returns ecore::EFloatObject:
	//	"-"? INT? "." INT;
	public DslGrammarAccess.EFloatObjectElements getEFloatObjectAccess() {
		return gaDsl.getEFloatObjectAccess();
	}
	
	public ParserRule getEFloatObjectRule() {
		return getEFloatObjectAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public DslGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaDsl.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	/// *
	// * DOC_COMMENTs are intended to be written to artifacts
	// * generated by a code generator.
	// * / terminal DOC_COMMENT:
	//	"<*"->"*>";
	public TerminalRule getDOC_COMMENTRule() {
		return gaDsl.getDOC_COMMENTRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaDsl.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaDsl.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDsl.getANY_OTHERRule();
	} 
}
