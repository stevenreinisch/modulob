/*
* generated by Xtext
*/
grammar InternalBehaviourDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.dubmas.modulob.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.dubmas.modulob.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.dubmas.modulob.services.BehaviourDslGrammarAccess;

}

@parser::members {

 	private BehaviourDslGrammarAccess grammarAccess;
 	
    public InternalBehaviourDslParser(TokenStream input, BehaviourDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BehaviouralModel";	
   	}
   	
   	@Override
   	protected BehaviourDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBehaviouralModel
entryRuleBehaviouralModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviouralModelRule()); }
	 iv_ruleBehaviouralModel=ruleBehaviouralModel 
	 { $current=$iv_ruleBehaviouralModel.current; } 
	 EOF 
;

// Rule BehaviouralModel
ruleBehaviouralModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='behaviours for system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBehaviouralModelAccess().getBehavioursForSystemKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviouralModelRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBehaviouralModelAccess().getSystemSystemCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='version' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBehaviouralModelAccess().getVersionKeyword_2());
    }
(
(
		lv_version_3_0=RULE_STRING
		{
			newLeafNode(lv_version_3_0, grammarAccess.getBehaviouralModelAccess().getVersionSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviouralModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_3_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviouralModelAccess().getBehavioursBehaviourParserRuleCall_4_0()); 
	    }
		lv_behaviours_4_0=ruleBehaviour		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviouralModelRule());
	        }
       		add(
       			$current, 
       			"behaviours",
        		lv_behaviours_4_0, 
        		"Behaviour");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBehaviour
entryRuleBehaviour returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviourRule()); }
	 iv_ruleBehaviour=ruleBehaviour 
	 { $current=$iv_ruleBehaviour.current; } 
	 EOF 
;

// Rule Behaviour
ruleBehaviour returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='behaviour' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBehaviourAccess().getBehaviourKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBehaviourAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviourRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBehaviourAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviourAccess().getReactionsReactionParserRuleCall_3_0()); 
	    }
		lv_reactions_3_0=ruleReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviourRule());
	        }
       		add(
       			$current, 
       			"reactions",
        		lv_reactions_3_0, 
        		"Reaction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBehaviourAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	 iv_ruleReaction=ruleReaction 
	 { $current=$iv_ruleReaction.current; } 
	 EOF 
;

// Rule Reaction
ruleReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReactionAccess().getInterfaceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getReactionAccess().getInterfaceInterfaceCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='reacts to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReactionAccess().getReactsToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getReactionAccess().getNotificationNotificationCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='as' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getReactionAccess().getAsKeyword_4_0());
    }
(
(
		lv_order_5_0=RULE_INT
		{
			newLeafNode(lv_order_5_0, grammarAccess.getReactionAccess().getOrderINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"order",
        		lv_order_5_0, 
        		"INT");
	    }

)
)	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getReactionAccess().getFullStopKeyword_4_2());
    }
)?	otherlv_7='by calling' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getReactionAccess().getByCallingKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getReactionAccess().getMethodMethodCrossReference_6_0()); 
	    }
		ruleReferenceableMethodName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReferenceableMethodName
entryRuleReferenceableMethodName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceableMethodNameRule()); } 
	 iv_ruleReferenceableMethodName=ruleReferenceableMethodName 
	 { $current=$iv_ruleReferenceableMethodName.current.getText(); }  
	 EOF 
;

// Rule ReferenceableMethodName
ruleReferenceableMethodName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getReferenceableMethodNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceableMethodNameAccess().getColonKeyword_1_0()); 
    }
(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getReferenceableMethodNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)*)
    ;







// Entry rule entryRulePrimitive
entryRulePrimitive returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); }
	 iv_rulePrimitive=rulePrimitive 
	 { $current=$iv_rulePrimitive.current; } 
	 EOF 
;

// Rule Primitive
rulePrimitive returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='primitive type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimitiveAccess().getPrimitiveTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPrimitiveAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAny
entryRuleAny returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyRule()); }
	 iv_ruleAny=ruleAny 
	 { $current=$iv_ruleAny.current; } 
	 EOF 
;

// Rule Any
ruleAny returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='any type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnyAccess().getAnyTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;









// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringValueAccess().getValueEStringObjectParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEStringObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EStringObject");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEStringObject
entryRuleEStringObject returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringObjectRule()); } 
	 iv_ruleEStringObject=ruleEStringObject 
	 { $current=$iv_ruleEStringObject.current.getText(); }  
	 EOF 
;

// Rule EStringObject
ruleEStringObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringObjectAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	 iv_ruleIntegerValue=ruleIntegerValue 
	 { $current=$iv_ruleIntegerValue.current; } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerValueAccess().getValueEIntegerObjectParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEIntegerObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EIntegerObject");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEIntegerObject
entryRuleEIntegerObject returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntegerObjectRule()); } 
	 iv_ruleEIntegerObject=ruleEIntegerObject 
	 { $current=$iv_ruleEIntegerObject.current.getText(); }  
	 EOF 
;

// Rule EIntegerObject
ruleEIntegerObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEIntegerObjectAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFloatValueAccess().getValueEFloatObjectParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEFloatObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloatValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EFloatObject");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEFloatObject
entryRuleEFloatObject returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFloatObjectRule()); } 
	 iv_ruleEFloatObject=ruleEFloatObject 
	 { $current=$iv_ruleEFloatObject.current.getText(); }  
	 EOF 
;

// Rule EFloatObject
ruleEFloatObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatObjectAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_1()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatObjectAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEFloatObjectAccess().getINTTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


